#This function finds the occurences of a potential vote in the given array
#by taking advantage of the recursion tree method of the Divide And Conquer
#algorithm design technique.
#
#Inputs: arr-> The array with the potential votes (the input array of the main
#              algorithm) or a subarray of it
#        high-> The highest index of the subarray to be used
#        low-> The lowest index of the subarray to be used
#        key-> The name/vote to be searched
#Output: An integer showing the number of a potential vote's (key) occurence
#        in the recursion tree

function findOccurences(arr, high, low, key):

    # base case (leaf of the tree)
    
    #if the element of the array matches the key return a base score of 1
    
    if low equals high and arr[low] equals key:
        return 1

    #if wrong inputs for high and low were given or
    #the element of the array does not match the key
    #return a base score of 0

    if low > high or (low equals high and arr[low] not equal to x):
        return 0

    # other cases (not a leaf)

    #calculate the variables left and right as the number of occurences of x
    #in the left and right subtrees (subarrays) respectively
    #then return their sum as the total number of key's occurences in the given subarray

    left = findOccurences(arr, (low+high)//2, low, key)
    right = findOccurences(arr, high, (low+high)//2 +1, key)
    return left + right


#The following is the main function of the algorithm
#Its main goal is to find the candidate who has the majority of the potential votes.
#This is done with respect to three different cases,
#   1-There is one candidate who may gather the majority of votes
#   2-There are two candidates who gather 50% of the votes each
#   3-No candidate gathers the majority of votes

function findMajority(arr):
    
    if arr.length is not equal to 0:

        #initialize the variables temp1 and temp2 to 'Nan'
        #temp1 refers to the winner of case 1
        #or one of the winners of case 2
        #temp2 refers to the remaining winner of case 2

        temp1='Nan'
        temp2='Nan'

        #Iterate through the array to find the candidate with the 50%
        #of the votes

        for i=1 to arr.length:
            if findOccurences(arr,arr.length-1,0,arr[i])>=arr.length/2:
                temp1 = arr[i] 
        
        #Iterate through the array again to check if another
        #candidate has also 50% of the votes

        for j=1 to arr.length:
            if findOccurences(arr,arr.length-1,0,arr[i]) equals arr.length/2:
                temp2 = arr[j]

        #If neither temp1 nor temp2 have changed, there is no
        #candidate that gathers the required number of votes
        #So, the respective message will be shown and the function
        #will return no value

        if temp1 equals 'Nan' and temp2 equals 'Nan':
            print("No candidate has the majority of Votes")
            return 

        #In any other occasion, both temp1 and temp2 will be returned
        #For case 1 only temp1 will contain a name
        #For case 2 both variables will contain a name

        return temp1, temp2
    
    else:
        print("No Voters Found")
#Calculation of Complexity

# The findMajority function has two independent for-loops that each call the
# findOccurences function n times, one time for each key/element of the array.
# As a recursive tree function, findOccurencies is of O(logn) complexity.
# This can also be verified with the use of the master theorem. 
# In particular, let n be the size of the given array.
# With the findOccurencies function this array is split by two through each
# recursion. Thus, a=2. 
# Each subarray created is of n/2 size. Thus, b=2
# Finally the combination of the result consists of sums which can be calculated
# in standard time. Thus, d=0
# Since d=lg(a) with lg being an abbreviation for the base b logarithm,
# the findOccurences function is of O(logn) complexity.
# Finally, the n repetitions of the findOccurences function indicates
# that the main findMajority function is of O(nlogn) complexity.